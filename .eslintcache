[{"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\index.js":"1","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\App.js":"2","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\stores\\userStore.js":"3","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Home.js":"4","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Room.js":"5","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Header.js":"6","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\Constants.js":"7","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\RoomResult.js":"8","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\UserForm.js":"9","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\CreateRoom.js":"10","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Prompt.js":"11","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Alert.js":"12","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\SideMenu.js":"13","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board.js":"14","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\SuggestSong.js":"15","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\AvatarOption.js":"16","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board\\BoardCanvas.js":"17","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Playlist.js":"18","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Video.js":"19","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board\\Player.js":"20","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board\\SpeechBubble.js":"21","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Song.js":"22","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board\\Sprite.js":"23"},{"size":481,"mtime":1611144054769,"results":"24","hashOfConfig":"25"},{"size":526,"mtime":1611400088455,"results":"26","hashOfConfig":"25"},{"size":8171,"mtime":1611400522134,"results":"27","hashOfConfig":"25"},{"size":1202,"mtime":1611268291427,"results":"28","hashOfConfig":"25"},{"size":2309,"mtime":1611400088497,"results":"29","hashOfConfig":"25"},{"size":1291,"mtime":1611323989739,"results":"30","hashOfConfig":"25"},{"size":669,"mtime":1611400360149,"results":"31","hashOfConfig":"25"},{"size":1176,"mtime":1611323989787,"results":"32","hashOfConfig":"25"},{"size":3328,"mtime":1611400088515,"results":"33","hashOfConfig":"25"},{"size":5677,"mtime":1611400088487,"results":"34","hashOfConfig":"25"},{"size":2612,"mtime":1611268292056,"results":"35","hashOfConfig":"25"},{"size":1429,"mtime":1611268291331,"results":"36","hashOfConfig":"25"},{"size":2341,"mtime":1611400088502,"results":"37","hashOfConfig":"25"},{"size":7560,"mtime":1611408271413,"results":"38","hashOfConfig":"25"},{"size":2014,"mtime":1611400088505,"results":"39","hashOfConfig":"25"},{"size":1149,"mtime":1611400088476,"results":"40","hashOfConfig":"25"},{"size":2823,"mtime":1611407824777,"results":"41","hashOfConfig":"25"},{"size":329,"mtime":1611400088490,"results":"42","hashOfConfig":"25"},{"size":3363,"mtime":1611400088518,"results":"43","hashOfConfig":"25"},{"size":3750,"mtime":1611268291417,"results":"44","hashOfConfig":"25"},{"size":14992,"mtime":1611144054745,"results":"45","hashOfConfig":"25"},{"size":938,"mtime":1611144054762,"results":"46","hashOfConfig":"25"},{"size":1114,"mtime":1611144054747,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1lz4ijw",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\index.js",[],["99","100"],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\App.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\stores\\userStore.js",["101"],"import { makeObservable, observable, action, computed} from 'mobx';\r\nimport axios from 'axios';\r\nimport io from \"socket.io-client\";\r\nimport {\r\n    ASK_FOR_VIDEO_INFORMATION, JOIN_ROOM, LEAVE_ROOM, SUGGEST_SONG, NEW_SONG, VOTE_SONG\r\n} from '../Constants';\r\n\r\nconst socketUrl = \"http://localhost:4200\";\r\n\r\nexport class UserStore {\r\n    constructor() {\r\n        this.socket = io(socketUrl)\r\n        this.getRooms()\r\n        this.room = {}\r\n        this.rooms = []\r\n        this.player_x = 350\r\n        this.player_y = 350\r\n        this.userName = \"\"\r\n        this.avatar = \"\"\r\n        this.currVidId = ''\r\n        this.vidPlayer = null\r\n        this.currentVidTime = 0\r\n        this.nextVidId = ''\r\n        this.avatars = [\r\n            { name: \"spritePlayer0\", src: \"./img/avatar_red.png\" },\r\n            { name: \"spritePlayer1\", src: \"./img/avatar_yellow.png\" },\r\n            { name: \"spritePlayer2\", src: \"./img/avatar_orange.png\" },\r\n            { name: \"spritePlayer3\", src: \"./img/avatar_white.png\" },\r\n            { name: \"spritePlayer4\", src: \"./img/avatar_lime.png\" },\r\n            { name: \"spritePlayer5\", src: \"./img/avatar_pink.png\" },\r\n            { name: \"spritePlayer6\", src: \"./img/avatar_cyan.png\" },\r\n            { name: \"spritePlayer7\", src: \"./img/avatar_black.png\" },\r\n            { name: \"spritePlayer8\", src: \"./img/avatar_purple.png\" },\r\n            { name: \"spritePlayer9\", src: \"./img/avatar_blue.png\" }\r\n        ]\r\n\r\n        this.genres = [\"Blues\", \"Classical\", \"Hip-Hop\",\r\n            \"Children\", \"Comedy\", \"Dance\", \"Electronic\",\r\n            \"Pop\", \"Jazz\", \"Anime\", \"K-Pop\", \"Opera\",\r\n            \"Rock\", \"Vocal\", \"Arabic\"]\r\n\r\n        this.themes = [\r\n            { name: \"Icy\", value: \"theme1\" },\r\n            { name: \"Sky\", value: \"theme2\" },\r\n            { name: \"Thunder\", value: \"theme3\" },\r\n            { name: \"Halloween1\", value: \"theme4\" },\r\n            { name: \"Halloween2\", value: \"theme5\" },\r\n            { name: \"WildZone\", value: \"theme6\" },\r\n            { name: \"Medieval\", value: \"theme7\" },\r\n            { name: \"Disco\", value: \"theme8\" },\r\n            { name: \"DiscoStar\", value: \"theme9\" },\r\n            { name: \"PlantWorld\", value: \"theme10\" },\r\n            { name: \"DJ.Penguin\", value: \"theme11\" },\r\n            { name: \"Splash\", value: \"theme12\" },\r\n            { name: \"Astro\", value: \"theme13\" },\r\n            { name: \"Snowy\", value: \"theme14\" },\r\n        ]\r\n\r\n        makeObservable(this, {\r\n            rooms: observable,\r\n            userName: observable,\r\n            avatar: observable,\r\n            room: observable,\r\n            player_x: observable,\r\n            player_y: observable,\r\n            vidPlayer: observable,\r\n            currVidId: observable,\r\n            currentVidTime: observable,\r\n            nextVidId: observable,\r\n            createRoom: action,\r\n            removeSong: action,\r\n            getRoom: action,\r\n            getRooms: action,\r\n            setRoom: action,\r\n            addUser: action,\r\n            suggestSong: action,\r\n            LeaveRoom: action,\r\n            addLike: action,\r\n            deleteRoom: action,\r\n            listenToSocket: action,\r\n            sortQueue: computed,\r\n        })\r\n        this.listenToSocket()\r\n    }\r\n    \r\n    listenToSocket(){\r\n        this.socket.on(NEW_SONG, (data) => {\r\n            const {id, song} = data\r\n            this.room.queue.push({id, song, votes: 1})\r\n        })\r\n\r\n        this.socket.on(VOTE_SONG, (data) => {\r\n            const {songID, value} = data\r\n            this.room.queue.find(q => q.id === songID).votes += value\r\n        })\r\n\r\n    }\r\n\r\n    async getRooms() {\r\n        try {\r\n            const result = (await axios.get(\"http://localhost:4200/rooms\")).data\r\n            this.rooms = result\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    }\r\n\r\n    async setRoom(room) {\r\n        this.room = room\r\n    }\r\n\r\n    compare(a, b) {\r\n        if (a.guests.length > b.guests.length) {\r\n            return -1\r\n        } else if (a.guests.length < b.guests.length) {\r\n            return 1\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    compareSongs(a, b){\r\n        if (a.votes > b.votes) {\r\n            return -1\r\n        } else if (a.votes < b.votes) {\r\n            return 1\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    get sortQueue(){\r\n        return [...this.room.queue].sort(this.compareSongs)\r\n    }\r\n\r\n    getTop10() {\r\n        return [...this.rooms].sort(this.compare)\r\n    }\r\n\r\n    async addLike(songID, unlike) {\r\n        try {\r\n            const value = unlike ? -1 : 1\r\n            this.room = (await axios.put(`http://localhost:4200/vote/${this.room._id}/${songID}/${value}`)).data\r\n            this.socket.emit(VOTE_SONG, { room: this.room._id, songID, value })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async createRoom(roomName, roomPassword, description, tags, theme, userName, avatar) {\r\n        try {\r\n            const host = this.socket.id\r\n            this.avatar = this.avatars.find(a => a.name === avatar)\r\n            this.userName = userName\r\n            const guests = []\r\n            guests.push({id: this.socket.id, userName, avatar})\r\n            const hostPassword = this.socket.id\r\n            const room = { roomName, guests, roomPassword, host, description, tags, queue: [], theme, hostPassword, size: 10 }\r\n            this.room = (await axios.post(\"http://localhost:4200/room\", room)).data\r\n            this.socket.emit(JOIN_ROOM, {\r\n                room: this.room._id\r\n            })            \r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getRoom() {\r\n        try {\r\n            const result = (await axios.get(`http://localhost:4200/room`, this.room._id)).data\r\n            this.room = result\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async LeaveRoom() {\r\n        try {\r\n            await axios.delete(`http://localhost:4200/delete/${this.room._id}/${this.socket.id}/guests`)\r\n            this.room = null\r\n            this.getRooms()\r\n            this.socket.emit(LEAVE_ROOM);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async deleteRoom() {\r\n        try {\r\n            await axios.delete(`http://localhost:4200/room/${this.room._id}`)\r\n            this.room = null\r\n            this.getRooms()\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async suggestSong(id, song) {\r\n        try {\r\n            const newVal = {id, song, votes: 1}\r\n            this.room = (await axios.put(`http://localhost:4200/add/${this.room._id}/queue`, newVal)).data\r\n            console.log(this.room)\r\n            this.socket.emit(SUGGEST_SONG, {\r\n                room: this.room._id,\r\n                song: song,\r\n                id: id\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async removeSong(vidId){\r\n        try {\r\n            this.room = (await axios.delete(`http://localhost:4200/delete/${this.room._id}/${vidId}/queue`)).data\r\n            console.log(this.room.queue)\r\n            console.log('hello?')\r\n            this.room.splice(0, 1) ///////////////come back to this\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async addUser(userName, avatar) {\r\n        try {\r\n            this.userName = userName\r\n            this.avatar = this.avatars.find(a => a.name === avatar)\r\n            const body = { id: this.socket.id, userName, avatar }\r\n            this.room = (await axios.put(`http://localhost:4200/add/${this.room._id}/guests`, body)).data\r\n            this.socket.emit(JOIN_ROOM, {\r\n                room: this.room._id,\r\n                player: {\r\n                    playerId: this.socket.id,\r\n                    userName: this.userName,\r\n                    avatar: this.avatar.name,\r\n                    x: this.player_x,\r\n                    y: this.player_y,\r\n                    theme: this.room.theme\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n}","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Home.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Room.js",["102"],"import React, {useState, useEffect} from 'react';\r\nimport Board from './Board';\r\nimport SideMenu from './SideMenu';\r\nimport UserForm from './UserForm';\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport { observer, inject } from 'mobx-react';\r\nimport {Button} from '@material-ui/core';\r\nimport Alert from './Alert'\r\nimport Prompt from './Prompt'\r\n\r\nfunction Room(props) {\r\n    const [open, setOpen] = useState(null);\r\n    const location = useLocation();\r\n    const [alert, setAlert] = useState({value: false, text: \"\"})\r\n    const [prompt, setPrompt] = useState(false)\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        checkValidity()\r\n    }, []);\r\n\r\n    const checkValidity = async () => {\r\n        const url = location.pathname.split('/')\r\n        const roomID = url[2]\r\n        await props.UserStore.getRooms()\r\n        const room = props.UserStore.rooms.find(r => r._id === roomID)\r\n        if(url.length > 3 && url[3] === 'host'){\r\n            setOpen(false)\r\n            return ;\r\n        }\r\n        if(room && room.guests.length < room.size){\r\n            if(room.roomPassword){\r\n                setPrompt(true)\r\n            }else{\r\n                props.UserStore.setRoom(room)\r\n                setOpen(true)\r\n            }\r\n        }else if(!room){\r\n            setAlert({value: true, text: \"The room is not found!\" })\r\n        }else{\r\n            setAlert({value: true, text: \"The room is full!\" })\r\n        }\r\n    }\r\n\r\n    const checkHost = () => props.UserStore.socket.id === props.UserStore.room.host\r\n\r\n    const deleteRoom = async () => {\r\n        props.UserStore.deleteRoom()\r\n        history.push(\"/home\")\r\n    }\r\n\r\n    return (\r\n        <div id=\"room\">\r\n            {open && <UserForm open={setOpen} /> }\r\n            {alert.value && <Alert text={alert.text} />}\r\n            {prompt && <Prompt setOpen={setOpen} />}\r\n            {open === false && (\r\n                <div className=\"roomGrid\">\r\n                    <SideMenu />\r\n                    <Board />\r\n                    {checkHost() && <Button variant=\"contained\" color=\"secondary\" onClick={deleteRoom} >\r\n                        Delete Room\r\n                    </Button>}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default inject(\"UserStore\")(observer(Room))\r\n\r\n","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Header.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\Constants.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\RoomResult.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\UserForm.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\CreateRoom.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Prompt.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Alert.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\SideMenu.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board.js",["103","104","105"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport BoardCanvas from './Board/BoardCanvas';\r\nimport { Button } from '@material-ui/core';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport { observer, inject } from 'mobx-react'\r\nimport { ADD_PLAYER, MOVE_PLAYER, PLAYER_MOVED, SEND_MESSAGE, RECEIVED_MESSAGE, REMOVE_PLAYER, NEW_PLAYER_HOST} from '../Constants';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    selectTheme: {\r\n        margin: theme.spacing(2),\r\n        minWidth: 130,\r\n        fontSize: 25\r\n    },\r\n    chat: {\r\n        margin: theme.spacing(0.2),\r\n        width: 1000,\r\n        fontSize: 25,\r\n        alignItems: 'center'\r\n    },\r\n    btnDance: {\r\n        width: 120,\r\n        margin: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nconst Board = observer((props) => {\r\n\r\n    const webSocket = useRef(props.UserStore.socket)\r\n\r\n    let { room,  userName, avatar} = props.UserStore\r\n\r\n    const playerIndex = (socket_id) => {\r\n        const index = boardRef.current.PLAYERS.findIndex(p => p.playerId === socket_id)\r\n        return index\r\n    }\r\n\r\n    const canvasRef = useRef(null),\r\n        messageRef = useRef(null),\r\n        boardRef = useRef(null),\r\n        [theme, setTheme] = useState(props.UserStore.room.theme),\r\n        classes = useStyles();\r\n\r\n    const doDance = () => {\r\n        boardRef.current.PLAYERS[playerIndex(webSocket.current.id)].sendMessage('/dance');\r\n        webSocket.current.emit(SEND_MESSAGE, {\r\n            id: webSocket.current.id,\r\n            message: '/dance',\r\n            room: room._id\r\n        })\r\n    }\r\n\r\n    const onSelectTheme = (e) => {\r\n        const theTheme = e.target.value;\r\n        boardRef.current.changeTheme(theTheme);\r\n        setTheme(theTheme);\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        const message = messageRef.current;\r\n        boardRef.current.PLAYERS[playerIndex(webSocket.current.id)].sendMessage(message.value);\r\n        webSocket.current.emit(SEND_MESSAGE, {\r\n            id: webSocket.current.id,\r\n            message: message.value,\r\n            room: room._id\r\n        })\r\n    }\r\n\r\n    const onCanvasClick = (e) => {\r\n        const rect = canvasRef.current.getBoundingClientRect();\r\n        let x = Math.floor(e.clientX - rect.left);\r\n        let y = Math.floor(e.clientY - rect.top);\r\n\r\n        const playerId = webSocket.current.id;\r\n        if (x + boardRef.current.PLAYERS[playerIndex(playerId)].width > canvasRef.current.width)\r\n            x = x - boardRef.current.PLAYERS[playerIndex(playerId)].width;\r\n\r\n        if (y + boardRef.current.PLAYERS[playerIndex(playerId)].height > canvasRef.current.height)\r\n            y = y - boardRef.current.PLAYERS[playerIndex(playerId)].height;\r\n\r\n        webSocket.current.emit(MOVE_PLAYER, {\r\n            id: webSocket.current.id,\r\n            x: x,\r\n            y: y,\r\n            room: room._id\r\n        })\r\n\r\n        boardRef.current.PLAYERS[playerIndex(playerId)].targetPos = { x, y };\r\n    }\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        boardRef.current = new BoardCanvas(canvas, context, theme);\r\n\r\n        if(webSocket.current.id === room.host){\r\n            room.guests.forEach(g => boardRef.current.newPlayer({\r\n                playerId: g.id,\r\n                userName: g.userName,\r\n                avatar: g.avatar,\r\n                x: 350,\r\n                y: 350,\r\n                width: 85,\r\n                height: 85,\r\n                theme: room.theme\r\n            }));\r\n        }else{\r\n            webSocket.current.on(NEW_PLAYER_HOST, (data) => {\r\n                data.forEach(d => boardRef.current.newPlayer({\r\n                    width: d.width,\r\n                    height: d.height,\r\n                    playerId: d.playerId,\r\n                    userName: d.userName,\r\n                    avatar: d.avatar,\r\n                    theme: d.theme,\r\n                    x: d.x,\r\n                    y: d.y,\r\n                }, { x: data.x, y: data.y}))\r\n            })\r\n        }\r\n\r\n        // room.guests.forEach(g => boardRef.current.newPlayer({\r\n        //     playerId: g.id,\r\n        //     userName: g.userName,\r\n        //     avatar: g.avatar,\r\n        //     x: 350,\r\n        //     y: 350,\r\n        //     width: 85,\r\n        //     height: 85,\r\n        //     theme: room.theme\r\n        // }));\r\n\r\n        boardRef.current.start();\r\n\r\n        webSocket.current.on(ADD_PLAYER, (data) => {\r\n            boardRef.current.newPlayer({\r\n                playerId: data.playerId,\r\n                userName: data.userName,\r\n                avatar: data.avatar,\r\n                x: data.x,\r\n                y: data.y,\r\n                height: 85,\r\n                width: 85,\r\n                theme: data.theme\r\n            });\r\n            if(webSocket.current.id === room.host){\r\n                webSocket.current.emit(NEW_PLAYER_HOST, {players: boardRef.current.PLAYERS, socket: data.playerId})\r\n            }\r\n        });\r\n\r\n        webSocket.current.on(PLAYER_MOVED, (data) => {\r\n            const { id, x, y } = data;\r\n            boardRef.current.PLAYERS[playerIndex(id)].targetPos = { x, y };\r\n        });\r\n\r\n        webSocket.current.on(RECEIVED_MESSAGE, (data) => {\r\n            const { message, id } = data\r\n            boardRef.current.PLAYERS[playerIndex(id)].sendMessage(message);\r\n        });\r\n\r\n        webSocket.current.on(REMOVE_PLAYER, (data) => {\r\n            const index = playerIndex(data)\r\n            boardRef.current.PLAYERS.splice(index, 1)\r\n        })\r\n\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"board\">\r\n            <canvas onMouseDown={onCanvasClick} ref={canvasRef} width=\"1000\" height=\"632\"></canvas>\r\n            <br />\r\n            <FormControl className={classes.chat}>\r\n                <InputEmoji maxLength={31} ref={messageRef} onEnter={sendMessage} cleanOnEnter placeholder=\"Type a message (/dance to dance)\" />\r\n                <Button type=\"button\" onClick={doDance} className={classes.btnDance} variant=\"contained\" color=\"secondary\">Dance</Button>\r\n            </FormControl>\r\n            <br />\r\n            <FormControl className={classes.selectTheme}>\r\n                <InputLabel color=\"secondary\">Select a theme:</InputLabel>\r\n                <NativeSelect value={theme} onChange={onSelectTheme} name=\"select_theme\" color=\"secondary\">\r\n                    <option value=\"theme1\">Icy</option>\r\n                    <option value=\"theme2\">Sky</option>\r\n                    <option value=\"theme3\">Thunder</option>\r\n                    <option value=\"theme4\">Halloween1</option>\r\n                    <option value=\"theme5\">Halloween2</option>\r\n                    <option value=\"theme6\">WildZone</option>\r\n                    <option value=\"theme7\">Medieval</option>\r\n                    <option value=\"theme8\">Disco</option>\r\n                    <option value=\"theme9\">DiscoStar</option>\r\n                    <option value=\"theme10\">PlantWorld</option>\r\n                    <option value=\"theme11\">DJ.Penguin</option>\r\n                    <option value=\"theme12\">Splash</option>\r\n                    <option value=\"theme13\">Astro</option>\r\n                    <option value=\"theme14\">Snowy</option>\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default inject(\"UserStore\")(Board)\r\n\r\n","C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\SuggestSong.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\AvatarOption.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board\\BoardCanvas.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Playlist.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Video.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board\\Player.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board\\SpeechBubble.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Song.js",[],"C:\\Users\\user\\Desktop\\code\\projects\\MusicParty\\Party-Among-Us\\src\\components\\Board\\Sprite.js",[],["106","107"],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":5,"column":5,"nodeType":"114","messageId":"115","endLine":5,"endColumn":30},{"ruleId":"116","severity":1,"message":"117","line":20,"column":8,"nodeType":"118","endLine":20,"endColumn":10,"suggestions":"119"},{"ruleId":"112","severity":1,"message":"120","line":35,"column":18,"nodeType":"114","messageId":"115","endLine":35,"endColumn":26},{"ruleId":"112","severity":1,"message":"121","line":35,"column":28,"nodeType":"114","messageId":"115","endLine":35,"endColumn":34},{"ruleId":"116","severity":1,"message":"122","line":170,"column":8,"nodeType":"118","endLine":170,"endColumn":10,"suggestions":"123"},{"ruleId":"108","replacedBy":"124"},{"ruleId":"110","replacedBy":"125"},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"no-unused-vars","'ASK_FOR_VIDEO_INFORMATION' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkValidity'. Either include it or remove the dependency array.","ArrayExpression",["128"],"'userName' is assigned a value but never used.","'avatar' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'room.guests', 'room.host', 'room.theme', and 'theme'. Either include them or remove the dependency array.",["129"],["126"],["127"],"no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [checkValidity]",{"range":"134","text":"135"},"Update the dependencies array to be: [room.guests, room.host, room.theme, theme]",{"range":"136","text":"137"},[676,678],"[checkValidity]",[5763,5765],"[room.guests, room.host, room.theme, theme]"]