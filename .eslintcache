[{"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\index.js":"1","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\App.js":"2","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\stores\\userStore.js":"3","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Home.js":"4","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Room.js":"5","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\SideMenu.js":"6","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board.js":"7","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\UserForm.js":"8","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\RoomResult.js":"9","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\CreateRoom.js":"10","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Playlist.js":"11","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\SuggestSong.js":"12","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board\\BoardCanvas.js":"13","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board\\Player.js":"14","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board\\SpeechBubble.js":"15","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Song.js":"16","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board\\Sprite.js":"17","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Video.js":"18","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\Constants.js":"19"},{"size":481,"mtime":1611152486061,"results":"20","hashOfConfig":"21"},{"size":518,"mtime":1611152342253,"results":"22","hashOfConfig":"21"},{"size":6685,"mtime":1611261926793,"results":"23","hashOfConfig":"21"},{"size":1675,"mtime":1611145877921,"results":"24","hashOfConfig":"21"},{"size":2084,"mtime":1611247143914,"results":"25","hashOfConfig":"21"},{"size":2238,"mtime":1611145877922,"results":"26","hashOfConfig":"21"},{"size":7231,"mtime":1611262027938,"results":"27","hashOfConfig":"21"},{"size":2673,"mtime":1611145877924,"results":"28","hashOfConfig":"21"},{"size":911,"mtime":1611145877922,"results":"29","hashOfConfig":"21"},{"size":4153,"mtime":1611145877920,"results":"30","hashOfConfig":"21"},{"size":328,"mtime":1611145877921,"results":"31","hashOfConfig":"21"},{"size":2058,"mtime":1611145877923,"results":"32","hashOfConfig":"21"},{"size":2954,"mtime":1611261983585,"results":"33","hashOfConfig":"21"},{"size":3750,"mtime":1611262421688,"results":"34","hashOfConfig":"21"},{"size":14992,"mtime":1611145877919,"results":"35","hashOfConfig":"21"},{"size":938,"mtime":1611145877923,"results":"36","hashOfConfig":"21"},{"size":1114,"mtime":1611145877920,"results":"37","hashOfConfig":"21"},{"size":3122,"mtime":1611155351366,"results":"38","hashOfConfig":"21"},{"size":480,"mtime":1611262040867,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"h1luz1",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\index.js",[],["83","84"],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\App.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\stores\\userStore.js",["85","86","87","88"],"import { makeObservable, observable, action } from 'mobx';\r\nimport axios from 'axios';\r\nimport io from \"socket.io-client\";\r\nimport {\r\n    ASK_FOR_VIDEO_INFORMATION, JOIN_ROOM, ADD_PLAYER, PLAYER_MOVED\r\n} from '../Constants';\r\n\r\nconst socketUrl = \"http://localhost:4200\";\r\n\r\nexport class UserStore {\r\n    constructor() {\r\n        this.socket = io(socketUrl)\r\n        this.getRooms()\r\n        this.onSocketMethods()\r\n        this.room = null\r\n        this.rooms = []\r\n        this.player_x = 350\r\n        this.player_y = 350\r\n        this.userName = \"\"\r\n        this.avatar = \"\"\r\n        this.avatars = [\r\n            { name: \"man\", src: \"https://koolinus.files.wordpress.com/2019/03/avataaars-e28093-koolinus-1-12mar2019.png?w=640\" },\r\n            { name: \"woman\", src: \"https://koolinus.files.wordpress.com/2019/03/avataaars-e28093-koolinus-1-12mar2019.png?w=640\" },\r\n            { name: \"guy\", src: \"https://user-images.githubusercontent.com/5709133/50445980-88299a80-0912-11e9-962a-6fd92fd18027.png\" },\r\n        ]\r\n        this.genres = [\"Blues\", \"Classical\", \"Hip-Hop\",\r\n            \"Children\", \"Comedy\", \"Dance\", \"Electronic\",\r\n            \"Pop\", \"Jazz\", \"Anime\", \"K-Pop\", \"Opera\",\r\n            \"Rock\", \"Vocal\", \"Arabic\"]\r\n        this.images = [\r\n            {\r\n                id: 1,\r\n                src: 'https://images.pexels.com/photos/4173624/pexels-photo-4173624.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500'\r\n            },\r\n            {\r\n                id: 2,\r\n                src: 'https://cdn.pixabay.com/photo/2016/11/29/05/45/astronomy-1867616__340.jpg'\r\n            },\r\n            {\r\n                id: 3,\r\n                src: 'https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__340.jpg'\r\n            }\r\n        ]\r\n\r\n\r\n        makeObservable(this, {\r\n            rooms: observable,\r\n            userName: observable,\r\n            avatar: observable,\r\n            room: observable,\r\n            player_x: observable,\r\n            player_y: observable,\r\n            createRoom: action,\r\n            getRoom: action,\r\n            getRooms: action,\r\n            setRoom: action,\r\n            addUser: action,\r\n            suggestSong: action,\r\n            LeaveRoom: action,\r\n            addLike: action,\r\n            deleteRoom: action,\r\n        })\r\n    }\r\n\r\n    onSocketMethods() {\r\n        this.socket.on('connect', () => {\r\n\r\n        });\r\n\r\n        this.socket.on('disconnect', () => {\r\n            if (this.room) {\r\n                this.LeaveRoom()\r\n            }\r\n            console.log(\"Disconnected\");\r\n        });\r\n    }\r\n\r\n    async getRooms() {\r\n        try {\r\n            const result = (await axios.get(\"http://localhost:4200/rooms\")).data\r\n            this.rooms = result\r\n        } catch (error) {\r\n            return error\r\n        }\r\n    }\r\n\r\n    async setRoom(room) {\r\n        this.room = room\r\n\r\n    }\r\n\r\n    compare(a, b) {\r\n        if (a.guests.length > b.guests.length) {\r\n            return -1\r\n        } else if (a.guests.length < b.guests.length) {\r\n            return 1\r\n        } else {\r\n            return 0\r\n        }\r\n    }\r\n\r\n    getTop10() {\r\n        return [...this.rooms].sort(this.compare)\r\n    }\r\n\r\n    async addLike(songID, unlike) {\r\n        try {\r\n            const song = this.room.queue.find(q => q.id === songID)\r\n            song.votes = unlike ? song.votes - 1 : song.votes + 1\r\n            const body = { newVal: this.room.queue, field: 'queue' }\r\n            this.room = (await axios.put(`http://localhost:4200/room/${this.room._id}`, body)).data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    //save room to DB\r\n    async createRoom(roomName, roomPassword, description, tags, theme) {\r\n        //roomName, guests, roomPassword, host, description, tags, queue, theme, hostPassword, size\r\n        try {\r\n            const guests = []\r\n            const host = this.socket.id\r\n            const hostPassword = this.socket.id\r\n            const room = { roomName, guests, roomPassword, host, description, tags, queue: [], theme, hostPassword, size: 10 }\r\n            console.log(room)\r\n            const response = (await axios.post(\"http://localhost:4200/room\", room)).data\r\n            console.log(response)\r\n            await this.getRooms()\r\n            this.room = response\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async getRoom() {\r\n        try {\r\n            const result = (await axios.get(`http://localhost:4200/room`, this.room._id)).data\r\n            this.room = result\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n\r\n    async LeaveRoom() {\r\n        try {\r\n            const index = this.room.guests.findIndex(g => this.socket.id === g.id)\r\n            this.room.guests.splice(index, 1)\r\n            const body = { field: 'guests', newVal: this.room.guests }\r\n            const response = (await axios.put(`http://localhost:4200/room/${this.room._id}`, body)).data\r\n            this.room = null\r\n            this.getRooms()\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async deleteRoom() {\r\n        try {\r\n            const response = await axios.delete(`http://localhost:4200/room/${this.room._id}`)\r\n            this.room = null\r\n            this.getRooms()\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async suggestSong(id, song) {\r\n        try {\r\n            this.room.queue.push({ id, song, votes: 1 })\r\n            const newVal = { field: 'queue', newVal: this.room.queue }\r\n            this.room = (await axios.put(`http://localhost:4200/room/${this.room._id}`, newVal)).data\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    async addUser(userName, avatar) {\r\n        try {\r\n            this.userName = userName\r\n            this.avatar = this.avatars.find(a => a.name === avatar)\r\n            this.room.guests.push({ id: this.socket.id, userName, avatar })\r\n            const body = { field: 'guests', newVal: this.room.guests }\r\n            this.room = (await axios.put(`http://localhost:4200/room/${this.room._id}`, body)).data\r\n            this.socket.emit(JOIN_ROOM, {\r\n                room: this.room._id,\r\n                player: {\r\n                    playerId: this.socket.id,\r\n                    userName: this.userName,\r\n                    avatar: this.avatar,\r\n                    x: this.player_x,\r\n                    y: this.player_y,\r\n                    theme: this.room.theme\r\n                }\r\n            })\r\n            this.socket.emit(ASK_FOR_VIDEO_INFORMATION);\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n}","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Home.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Room.js",["89"],"import React, {useState, useEffect} from 'react';\r\nimport Board from './Board';\r\nimport SideMenu from './SideMenu';\r\nimport UserForm from './UserForm';\r\nimport {useHistory, useLocation} from \"react-router-dom\";\r\nimport { observer, inject } from 'mobx-react';\r\nimport {Button} from '@material-ui/core';\r\n\r\nfunction Room(props) {\r\n    const [open, setOpen] = useState(null);\r\n    const location = useLocation();\r\n    let history = useHistory();\r\n\r\n    useEffect(() => {\r\n        checkValidity()\r\n    }, []);\r\n\r\n    const checkValidity = async () => {\r\n        const roomID = location.pathname.split('/')[2]\r\n        await props.UserStore.getRooms()\r\n        const room = props.UserStore.rooms.find(r => r._id === roomID)\r\n        if(room && room.guests.length < room.size){\r\n            if(room.roomPassword){\r\n                const password = prompt(\"Please write the room Password\")\r\n                if(password === room.roomPassword){\r\n                    props.UserStore.setRoom(room)\r\n                    setOpen(true)\r\n                }\r\n            }else{\r\n                props.UserStore.setRoom(room)\r\n                setOpen(true)\r\n            }\r\n        }else if(!room){\r\n            alert(\"Room is Not Found\")\r\n            history.push(\"/home\")\r\n        }else{\r\n            alert(\"The Room is Full\")\r\n            history.push(\"/home\")\r\n        }\r\n    }\r\n\r\n    const checkHost = () => props.UserStore.socket.id === props.UserStore.room.host\r\n\r\n    const deleteRoom = async () => {\r\n        props.UserStore.deleteRoom()\r\n        history.push(\"/home\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"roomGrid\">\r\n            {open && <UserForm open={setOpen} /> }\r\n            {open === false && (\r\n                <>\r\n                    <SideMenu />\r\n                    <Board />\r\n                    {checkHost() && <Button variant=\"contained\" color=\"secondary\" onClick={deleteRoom} >\r\n                        Delete Room\r\n                    </Button>}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default inject(\"UserStore\")(observer(Room))\r\n\r\n","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\SideMenu.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board.js",["90","91","92","93","94","95","96"],"import React, { useRef, useEffect, useState } from 'react';\r\nimport BoardCanvas from './Board/BoardCanvas';\r\nimport { Button } from '@material-ui/core';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport NativeSelect from '@material-ui/core/NativeSelect';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputEmoji from \"react-input-emoji\";\r\nimport { observer, inject } from 'mobx-react'\r\nimport { ADD_PLAYER, MOVE_PLAYER, PLAYER_MOVED, SEND_MESSAGE, RECEIVED_MESSAGE } from '../Constants';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    selectTheme: {\r\n        margin: theme.spacing(2),\r\n        minWidth: 130,\r\n        fontSize: 25\r\n    },\r\n    chat: {\r\n        margin: theme.spacing(0.2),\r\n        width: 1000,\r\n        fontSize: 25,\r\n        alignItems: 'center'\r\n    },\r\n    btnDance: {\r\n        width: 120,\r\n        margin: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nconst Board = observer((props) => {\r\n\r\n    const webSocket = useRef(props.UserStore.socket)\r\n\r\n    let { userName, avatar, player_x, player_y, room, width, height } = props.UserStore\r\n\r\n    const playerIndex = (socket_id) => {\r\n        const index = boardRef.current.PLAYERS.findIndex(p => p.playerId === socket_id)\r\n        return index\r\n    }\r\n\r\n    const canvasRef = useRef(null),\r\n        messageRef = useRef(null),\r\n        boardRef = useRef(null),\r\n        [theme, setTheme] = useState('theme1'),\r\n        classes = useStyles();\r\n\r\n    const doDance = () => {\r\n        boardRef.current.PLAYERS[playerIndex(webSocket.current.id)].sendMessage('/dance');\r\n        webSocket.current.emit(SEND_MESSAGE, {\r\n            id: webSocket.current.id,\r\n            message: '/dance',\r\n            room: room._id\r\n        })\r\n    }\r\n\r\n    const onSelectTheme = (e) => {\r\n        const theTheme = e.target.value;\r\n        boardRef.current.changeTheme(theTheme);\r\n        setTheme(theTheme);\r\n    }\r\n\r\n    const sendMessage = () => {\r\n        const message = messageRef.current;\r\n        boardRef.current.PLAYERS[playerIndex(webSocket.current.id)].sendMessage(message.value);\r\n        webSocket.current.emit(SEND_MESSAGE, {\r\n            id: webSocket.current.id,\r\n            message: message.value,\r\n            room: room._id\r\n        })\r\n    }\r\n\r\n    const onCanvasClick = (e) => {\r\n\r\n        console.log(boardRef.current.PLAYERS);\r\n\r\n        const rect = canvasRef.current.getBoundingClientRect();\r\n        let x = Math.floor(e.clientX - rect.left);\r\n        let y = Math.floor(e.clientY - rect.top);\r\n\r\n        const playerId = webSocket.current.id;\r\n        console.log(playerIndex(playerId))\r\n        if (x + boardRef.current.PLAYERS[playerIndex(playerId)].width > canvasRef.current.width)\r\n            x = x - boardRef.current.PLAYERS[playerIndex(playerId)].width;\r\n\r\n        if (y + boardRef.current.PLAYERS[playerIndex(playerId)].height > canvasRef.current.height)\r\n            y = y - boardRef.current.PLAYERS[playerIndex(playerId)].height;\r\n\r\n        console.log(webSocket.current.id);\r\n        webSocket.current.emit(MOVE_PLAYER, {\r\n            id: webSocket.current.id,\r\n            x: x,\r\n            y: y,\r\n            room: room._id\r\n        })\r\n\r\n        boardRef.current.PLAYERS[playerIndex(playerId)].targetPos = { x, y };\r\n    }\r\n\r\n    useEffect(() => {\r\n        console.log('??????????????????????')\r\n        //webSocket.current = props.UserStore.socket\r\n        // const playerProps = {\r\n        //     playerId: webSocket.current.id,\r\n        //     userName: userName,\r\n        //     avatar: avatar,\r\n        //     width: width,\r\n        //     height: height,\r\n        //     x: player_x,\r\n        //     y: player_y,\r\n        //     playerMessage: playerMessage,\r\n        //     theme: room.theme\r\n        // }\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        boardRef.current = new BoardCanvas(canvas, context, 'theme1');\r\n        //boardRef.current.PLAYERS = []\r\n        console.log(room.guests);\r\n        room.guests.forEach(g => boardRef.current.newPlayer({\r\n            playerId: g.id,\r\n            userName: g.userName,\r\n            avatar: g.avatar,\r\n            x: 350,\r\n            y: 350,\r\n            width: 85,\r\n            height: 85,\r\n            theme: room.theme\r\n        }));\r\n        boardRef.current.start();\r\n\r\n        webSocket.current.on(ADD_PLAYER, (data) => {\r\n            console.log(data)\r\n            boardRef.current.newPlayer({\r\n                playerId: data.playerId,\r\n                userName: data.userName,\r\n                avatar: data.avatar,\r\n                x: data.x,\r\n                y: data.y,\r\n                height: 85,\r\n                width: 85,\r\n                theme: data.theme\r\n            });\r\n        });\r\n\r\n        webSocket.current.on(PLAYER_MOVED, (data) => {\r\n            // e = ({clientX = x, clientY = y}, id = socket.id, bool = false)\r\n            const { id, x, y } = data;\r\n            console.log(playerIndex(id));\r\n            //onCanvasClick({clientX: x, clientY: y}/*, id, true*/)\r\n            boardRef.current.PLAYERS[playerIndex(id)].targetPos = { x, y };\r\n        });\r\n\r\n        webSocket.current.on(RECEIVED_MESSAGE, (data) => {\r\n            const { message, id } = data\r\n            //playerMessage = message\r\n            console.log(message);\r\n            boardRef.current.PLAYERS[playerIndex(id)].sendMessage(message);\r\n        });\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div id=\"board\">\r\n            <canvas onMouseDown={onCanvasClick} ref={canvasRef} width=\"1000\" height=\"632\"></canvas>\r\n            <br />\r\n            <FormControl className={classes.chat}>\r\n                <InputEmoji maxLength={31} ref={messageRef} onEnter={sendMessage} cleanOnEnter placeholder=\"Type a message (/dance to dance)\" />\r\n                <Button type=\"button\" onClick={doDance} className={classes.btnDance} variant=\"contained\" color=\"secondary\">Dance</Button>\r\n            </FormControl>\r\n            <br />\r\n            <FormControl className={classes.selectTheme}>\r\n                <InputLabel color=\"secondary\">Select a theme:</InputLabel>\r\n                <NativeSelect value={theme} onChange={onSelectTheme} name=\"select_theme\" color=\"secondary\">\r\n                    <option value=\"theme1\">Icy</option>\r\n                    <option value=\"theme2\">Sky</option>\r\n                    <option value=\"theme3\">Thunder</option>\r\n                    <option value=\"theme4\">Halloween1</option>\r\n                    <option value=\"theme5\">Halloween2</option>\r\n                    <option value=\"theme6\">WildZone</option>\r\n                    <option value=\"theme7\">Medieval</option>\r\n                    <option value=\"theme8\">Disco</option>\r\n                    <option value=\"theme9\">DiscoStar</option>\r\n                    <option value=\"theme10\">PlantWorld</option>\r\n                    <option value=\"theme11\">DJ.Penguin</option>\r\n                    <option value=\"theme12\">Splash</option>\r\n                    <option value=\"theme13\">Astro</option>\r\n                    <option value=\"theme14\">Snowy</option>\r\n                </NativeSelect>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default inject(\"UserStore\")(Board)","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\UserForm.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\RoomResult.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\CreateRoom.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Playlist.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\SuggestSong.js",["97"],"import React, { useState } from 'react';\r\nimport { Modal, Backdrop, Fade, makeStyles} from '@material-ui/core';\r\nimport { observer, inject } from 'mobx-react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(4, 4, 4),\r\n        display: 'grid',\r\n        gridGap: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nfunction SuggestSong(props) {\r\n    const [open, setOpen] = useState(true)\r\n    const classes = useStyles();\r\n\r\n    const clickEvent = async (event) => {\r\n        const {id, dataset, innerHTML} = event.target\r\n        // console.log(dataset.channel)\r\n        await props.UserStore.getRoom()\r\n        const ifPreviouslyAdded = props.UserStore.room.queue.find(q => q.id === id)\r\n        ifPreviouslyAdded ? props.UserStore.addLike(id) : await props.UserStore.suggestSong(id, innerHTML)\r\n        handleClose()\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        props.openSuggest(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={true}>\r\n                    <div className={classes.paper} >\r\n                        {props.items.map(i => <div id={i.id} key={i.id} data-channel={i.channel} onClick={clickEvent} >{i.title}</div> )}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default inject(\"UserStore\")(observer(SuggestSong))\r\n","C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board\\BoardCanvas.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board\\Player.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board\\SpeechBubble.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Song.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Board\\Sprite.js",[],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\components\\Video.js",["98"],"C:\\Users\\SUHA\\Desktop\\Party-Among-Us\\src\\Constants.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":5,"column":43,"nodeType":"105","messageId":"106","endLine":5,"endColumn":53},{"ruleId":"103","severity":1,"message":"107","line":5,"column":55,"nodeType":"105","messageId":"106","endLine":5,"endColumn":67},{"ruleId":"103","severity":1,"message":"108","line":150,"column":19,"nodeType":"105","messageId":"106","endLine":150,"endColumn":27},{"ruleId":"103","severity":1,"message":"108","line":160,"column":19,"nodeType":"105","messageId":"106","endLine":160,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":16,"column":8,"nodeType":"111","endLine":16,"endColumn":10,"suggestions":"112"},{"ruleId":"103","severity":1,"message":"113","line":34,"column":11,"nodeType":"105","messageId":"106","endLine":34,"endColumn":19},{"ruleId":"103","severity":1,"message":"114","line":34,"column":21,"nodeType":"105","messageId":"106","endLine":34,"endColumn":27},{"ruleId":"103","severity":1,"message":"115","line":34,"column":29,"nodeType":"105","messageId":"106","endLine":34,"endColumn":37},{"ruleId":"103","severity":1,"message":"116","line":34,"column":39,"nodeType":"105","messageId":"106","endLine":34,"endColumn":47},{"ruleId":"103","severity":1,"message":"117","line":34,"column":55,"nodeType":"105","messageId":"106","endLine":34,"endColumn":60},{"ruleId":"103","severity":1,"message":"118","line":34,"column":62,"nodeType":"105","messageId":"106","endLine":34,"endColumn":68},{"ruleId":"109","severity":1,"message":"119","line":158,"column":8,"nodeType":"111","endLine":158,"endColumn":10,"suggestions":"120"},{"ruleId":"103","severity":1,"message":"121","line":26,"column":20,"nodeType":"105","messageId":"106","endLine":26,"endColumn":27},{"ruleId":"103","severity":1,"message":"122","line":5,"column":27,"nodeType":"105","messageId":"106","endLine":5,"endColumn":36},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'ADD_PLAYER' is defined but never used.","Identifier","unusedVar","'PLAYER_MOVED' is defined but never used.","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkValidity'. Either include it or remove the dependency array.","ArrayExpression",["125"],"'userName' is assigned a value but never used.","'avatar' is assigned a value but never used.","'player_x' is assigned a value but never used.","'player_y' is assigned a value but never used.","'width' is assigned a value but never used.","'height' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'room.guests' and 'room.theme'. Either include them or remove the dependency array.",["126"],"'dataset' is assigned a value but never used.","'JOIN_ROOM' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [checkValidity]",{"range":"131","text":"132"},"Update the dependencies array to be: [room.guests, room.theme]",{"range":"133","text":"134"},[501,503],"[checkValidity]",[5438,5440],"[room.guests, room.theme]"]